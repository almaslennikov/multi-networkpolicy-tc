// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	netlink "github.com/vishvananda/netlink"
)

// NetlinkProvider is an autogenerated mock type for the NetlinkProvider type
type NetlinkProvider struct {
	mock.Mock
}

// ChainAdd provides a mock function with given fields: link, chain
func (_m *NetlinkProvider) ChainAdd(link netlink.Link, chain netlink.Chain) error {
	ret := _m.Called(link, chain)

	var r0 error
	if rf, ok := ret.Get(0).(func(netlink.Link, netlink.Chain) error); ok {
		r0 = rf(link, chain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChainDel provides a mock function with given fields: link, chain
func (_m *NetlinkProvider) ChainDel(link netlink.Link, chain netlink.Chain) error {
	ret := _m.Called(link, chain)

	var r0 error
	if rf, ok := ret.Get(0).(func(netlink.Link, netlink.Chain) error); ok {
		r0 = rf(link, chain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChainList provides a mock function with given fields: link, parent
func (_m *NetlinkProvider) ChainList(link netlink.Link, parent uint32) ([]netlink.Chain, error) {
	ret := _m.Called(link, parent)

	var r0 []netlink.Chain
	if rf, ok := ret.Get(0).(func(netlink.Link, uint32) []netlink.Chain); ok {
		r0 = rf(link, parent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]netlink.Chain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(netlink.Link, uint32) error); ok {
		r1 = rf(link, parent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FilterAdd provides a mock function with given fields: filter
func (_m *NetlinkProvider) FilterAdd(filter netlink.Filter) error {
	ret := _m.Called(filter)

	var r0 error
	if rf, ok := ret.Get(0).(func(netlink.Filter) error); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterDel provides a mock function with given fields: filter
func (_m *NetlinkProvider) FilterDel(filter netlink.Filter) error {
	ret := _m.Called(filter)

	var r0 error
	if rf, ok := ret.Get(0).(func(netlink.Filter) error); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FilterList provides a mock function with given fields: link, parent
func (_m *NetlinkProvider) FilterList(link netlink.Link, parent uint32) ([]netlink.Filter, error) {
	ret := _m.Called(link, parent)

	var r0 []netlink.Filter
	if rf, ok := ret.Get(0).(func(netlink.Link, uint32) []netlink.Filter); ok {
		r0 = rf(link, parent)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]netlink.Filter)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(netlink.Link, uint32) error); ok {
		r1 = rf(link, parent)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LinkByName provides a mock function with given fields: name
func (_m *NetlinkProvider) LinkByName(name string) (netlink.Link, error) {
	ret := _m.Called(name)

	var r0 netlink.Link
	if rf, ok := ret.Get(0).(func(string) netlink.Link); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(netlink.Link)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QdiscAdd provides a mock function with given fields: qdisc
func (_m *NetlinkProvider) QdiscAdd(qdisc netlink.Qdisc) error {
	ret := _m.Called(qdisc)

	var r0 error
	if rf, ok := ret.Get(0).(func(netlink.Qdisc) error); ok {
		r0 = rf(qdisc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QdiscDel provides a mock function with given fields: qdisc
func (_m *NetlinkProvider) QdiscDel(qdisc netlink.Qdisc) error {
	ret := _m.Called(qdisc)

	var r0 error
	if rf, ok := ret.Get(0).(func(netlink.Qdisc) error); ok {
		r0 = rf(qdisc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// QdiscList provides a mock function with given fields: link
func (_m *NetlinkProvider) QdiscList(link netlink.Link) ([]netlink.Qdisc, error) {
	ret := _m.Called(link)

	var r0 []netlink.Qdisc
	if rf, ok := ret.Get(0).(func(netlink.Link) []netlink.Qdisc); ok {
		r0 = rf(link)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]netlink.Qdisc)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(netlink.Link) error); ok {
		r1 = rf(link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewNetlinkProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewNetlinkProvider creates a new instance of NetlinkProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNetlinkProvider(t mockConstructorTestingTNewNetlinkProvider) *NetlinkProvider {
	mock := &NetlinkProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
